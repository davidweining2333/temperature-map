{"version":3,"sources":["views/map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","Map","props","state","dataSource","key","name","lang","lat","linesDataSource","latLangs","color","columns","title","dataIndex","linesColumns","temperatureCharts","refreshCharts","record","base","data","this","generateData","setOption","grid","top","bottom","right","text","textStyle","tooltip","trigger","xAxis","type","axisPointer","value","snap","lineStyle","opacity","width","label","show","formatter","params","echarts","formatTime","backgroundColor","handle","dataZoom","throttle","yAxis","boundaryGap","splitLine","series","smooth","refreshLineCharts","randomData","now","oneDay","oneHour","changBase","Date","Math","random","toString","getFullYear","getMonth","getDate","join","getHours","round","baseTemp","i","push","map","center","crs","CRS","EPSG3857","zoom","layers","tileLayer","attribution","forEach","item","marker","bindTooltip","openTooltip","addTo","on","event","target","line","polyline","setTimeout","fitBounds","concat","document","getElementById","markerPosition","className","size","onRow","onClick","setView","console","log","id","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f2cd8060.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport 'antd/dist/antd.css';\nimport { Table } from 'antd';\nimport './Map.less';\nimport 'leaflet/dist/leaflet.css';\nimport * as echarts from \"echarts\";\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow\n});\nL.Marker.prototype.options.icon = DefaultIcon;\nclass Map extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataSource: [\n                {\n                    key: 'cd',\n                    name: '成都',\n                    lang: '104.071887',\n                    lat: '30.662205'\n                },\n                {\n                    key: 'bj',\n                    name: '北京',\n                    lang: '116.46',\n                    lat: '39.92'\n                },\n                {\n                    key: 'sh',\n                    name: '上海',\n                    lang: '121.4737021',\n                    lat: '31.2303904'\n                }\n            ],\n            linesDataSource: [\n                {\n                    key: \"1\",\n                    name: \"西安-郑州-武汉\",\n                    latLangs: [[\"34.345408\", \"108.945194\"], [\"34.753091\", \"113.630756\"], [\"30.59816\", \"114.312606\"]],\n                    color: \"red\"\n                },\n                {\n                    key: \"2\",\n                    name: \"成都-北京-上海\",\n                    latLangs: [['30.662205', '104.071887'], ['39.92', '116.46'], ['31.2303904', '121.4737021']],\n                    color: \"yellow\"\n                }\n            ],\n            columns: [\n                {\n                    title: '名称',\n                    dataIndex: 'name',\n                    key: 'name',\n                },\n                {\n                    title: '经度',\n                    dataIndex: 'lang',\n                    key: 'lang',\n                },\n                {\n                    title: '纬度',\n                    dataIndex: 'lat',\n                    key: 'lat',\n                }\n            ],\n            linesColumns: [\n                {\n                    title: '线路名称',\n                    dataIndex: 'name',\n                    key: 'name',\n                },\n                // {\n                //     title: '经度',\n                //     dataIndex: 'lang',\n                //     key: 'lang',\n                // },\n                // {\n                //     title: '纬度',\n                //     dataIndex: 'lat',\n                //     key: 'lat',\n                // }\n            ]\n        }\n        this.temperatureCharts = void 0;\n        this.refreshCharts = function (record) {\n            let base = 20;\n            if (record) {\n                switch (record.key) {\n                    case \"cd\":\n                        base = 10;\n                        break;\n                    case \"bj\":\n                        base = 0;\n                        break;\n                    case \"sh\":\n                        base = 20;\n                        break;\n                }\n            }\n            let data = this.generateData(base);\n\n            this.temperatureCharts.setOption({\n                grid: { top: 10, bottom: 20, right: 20 },\n                title: {\n                    text: `${record.name}气温趋势图`,\n                    textStyle:{\n                        color:\"white\"\n                    }\n                },\n                tooltip: {\n                    trigger: 'axis',\n                },\n                xAxis: {\n                    type: 'time',\n                    axisPointer: {\n                        value: '2021-10-7',\n                        snap: true,\n                        lineStyle: {\n                            color: '#004E52',\n                            opacity: 0.5,\n                            width: 2\n                        },\n                        label: {\n                            show: true,\n                            formatter: function (params) {\n                                return echarts.format.formatTime('yyyy-MM-dd', params.value);\n                            },\n                            backgroundColor: '#004E52'\n                        },\n                        handle: {\n                            show: true,\n                            color: '#004E52'\n                        }\n                    },\n                    // data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']\n                },\n                dataZoom: [{\n                    type: 'inside',\n                    throttle: 50\n                }],\n                yAxis: {\n                    type: 'value',\n                    boundaryGap: [0, '100%'],\n                    splitLine: {\n                        show: false\n                    }\n                },\n                series: [{\n                    name: '气温（℃）',\n                    type: 'line',\n                    data,\n                    smooth: true\n                }]\n            }, true);\n        };\n        this.refreshLineCharts = function (record) {\n            let base = 200;\n            if (record) {\n                switch (record.key) {\n                    case \"cd\":\n                        base = 10;\n                        break;\n                    case \"bj\":\n                        base = 0;\n                        break;\n                    case \"sh\":\n                        base = 20;\n                        break;\n                }\n            }\n            let data = this.generateData(base, 100);\n\n            this.temperatureCharts.setOption({\n                grid: { top: 10, bottom: 20, right: 20 },\n                title: {\n                    text: `${record.name}流量趋势图`,\n                    textStyle:{\n                        color:\"white\"\n                    }\n                },\n                tooltip: {\n                    trigger: 'axis',\n                },\n                xAxis: {\n                    type: 'time',\n                    axisPointer: {\n                        value: '2021-01-28',\n                        snap: true,\n                        lineStyle: {\n                            color: '#004E52',\n                            opacity: 0.5,\n                            width: 2\n                        },\n                        label: {\n                            show: true,\n                            formatter: function (params) {\n                                return echarts.format.formatTime('yyyy-MM-dd', params.value);\n                            },\n                            backgroundColor: '#004E52'\n                        },\n                        handle: {\n                            show: true,\n                            color: '#004E52'\n                        }\n                    },\n                },\n                yAxis: {\n                    type: 'value',\n                    boundaryGap: [0, '100%'],\n                    splitLine: {\n                        show: false\n                    }\n                },\n                dataZoom: [{\n                    type: 'inside',\n                    throttle: 50\n                }],\n                series: [{\n                    name: '流量',\n                    type: 'line',\n                    data,\n                    smooth: true\n                }]\n            }, true);\n        };\n        this.randomData = function (now, oneDay, oneHour, value, changBase) {\n            now = new Date(+now + oneHour);\n            value = value + Math.random() * (changBase || 10);\n            return {\n                name: now.toString(),\n                value: [\n                    [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/') + ` ${now.getHours()}:00:00`,\n                    Math.round(value)\n                ]\n            };\n        }\n\n        this.generateData = function (baseTemp, changBase) {\n            var data = [];\n            var now = +new Date();\n            var oneDay = 24 * 3600 * 1000;\n            var oneHour = 3600 * 1000;\n            var value = Math.random() * 1000;\n            for (var i = 0; i < 30 * 24; i++) {\n                data.push(this.randomData(now, oneDay, oneHour * i, baseTemp, changBase));\n            }\n            return data;\n        }\n    }\n    componentDidMount() {\n        // create map\n        this.map = L.map('map', {\n            center: [30.662205, 104.071887],\n            crs: L.CRS.EPSG3857,\n            zoom: 14,\n            layers: [\n                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n                    attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                }),\n            ]\n        });\n\n        // add marker\n        // this.marker = L.marker([30.662205, 104.071887], {\n\n        // }).addTo(this.map);\n        this.state.dataSource.forEach(item => {\n            let marker = L.marker([item.lat, item.lang], {\n                color: \"red\",\n                data: item\n            });\n            marker.bindTooltip(item.name).openTooltip();\n            marker.addTo(this.map);\n            marker.on(\"click\", (event) => {\n                this.refreshCharts(event.target.options.data);\n            });\n        });\n        this.state.linesDataSource.forEach(item => {\n            let line = L.polyline(item.latLangs, { color: item.color ,data: item});\n            line.bindTooltip(item.name).openTooltip();\n            line.addTo(this.map)\n            line.on(\"click\", (event) => {\n                this.refreshLineCharts(event.target.options.data);\n            });\n        });\n        setTimeout(() => {\n            this.map.fitBounds(this.state.dataSource.map(item => [item.lat, item.lang]).concat(this.state.linesDataSource.map(item => item.latLangs)));\n        })\n        // // add layer\n        // this.layer = L.layerGroup().addTo(this.map);\n        // this.map.setView(\n        //     center, zoom\n        // )\n        this.temperatureCharts = echarts.init(document.getElementById('tempuratureCharts'));\n        // this.refreshCharts();\n\n    }\n    componentDidUpdate({ markerPosition }) {\n        // check if position has changed \n        // if (this.props.markerPosition !== markerPosition) {\n        //     this.marker.setLatLng(this.props.markerPosition);\n        // }\n    }\n    render() {\n\n        return <div className=\"body\">\n            <div className=\"markes-table-area\">\n                <h4>位置列表</h4>\n                <Table dataSource={this.state.dataSource} columns={this.state.columns} size=\"small\"\n                    onRow={record => {\n                        return {\n                            onClick: event => {\n                                this.map.setView([record.lat, record.lang]);\n                                this.refreshCharts(record);\n                                console.log(record)\n                            }, // 点击行\n                        };\n                    }} />\n            </div>\n            <div className=\"lines-table-area\">\n                <h4>线路列表</h4>\n                <Table dataSource={this.state.linesDataSource} columns={this.state.linesColumns} size=\"small\"\n                    onRow={record => {\n                        return {\n                            onClick: event => {\n                                this.map.fitBounds(record.latLangs);\n                                this.refreshLineCharts(record);\n                                console.log(record)\n                            }, // 点击行\n                        };\n                    }} />\n            </div>\n            <div className=\"statistics-area\">\n                {/* <h4>气温趋势图</h4> */}\n                <div id=\"tempuratureCharts\"></div>\n            </div>\n            <div id=\"map\"></div>\n        </div>\n    }\n}\n\nexport default Map;","import './App.less';\nimport Map from \"./views/map/Map\"\nconst App = () => (\n    <div className=\"App\">\n        <Map></Map>\n    </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}